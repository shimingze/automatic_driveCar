using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.IO;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Threading;

public class Test1 : MonoBehaviour
{
    static double Pi = System.Math.PI;

    public GameObject AI;
    public GameObject Move;
    public LayerMask mask;
    public string msign;

    

    ///TcpSocket mTcpSocket = new TcpSocket("192.168.0.103", 4488);
    TcpSocket mTcpSocket = new TcpSocket("127.0.0.1", 4488);

    //ServerSocket socket = new ServerSocket("127.0.0.1", 4488);

    public int IsCollision(Vector3 obj1,Vector3 obj2)
    {
        float dis = Vector3.Distance(obj1, obj2);
        //print(dis);
        if (dis < 1.5)
            return 1;
        else
            return 0;
    }

    public void Send(string sendMessage)
    {
        msign = TcpSocket.receiveMessage;
        if (msign == "#")
        {
            mTcpSocket.Send(Encoding.UTF8.GetBytes(sendMessage));
        }
        
    }

    //坐标转换
    private Vector3 GetRelativePosition(Transform origin, Vector3 position)
    {
        Vector3 distance = position - origin.position;
        Vector3 relativePosition = Vector3.zero;
        relativePosition.x = Vector3.Dot(distance, origin.right.normalized);
        relativePosition.y = Vector3.Dot(distance, origin.up.normalized);
        relativePosition.z = Vector3.Dot(distance, origin.forward.normalized);
        return relativePosition;
    }

    //筛选有效值，此函数返回值即为障碍物坐标
    public string SelectionPoint(float x,float y,float z)
    {
        string message;
        if (y > 0 && z > 0)
        {
            //发送坐标点
            message = x + "," + y + "," + z;
            return message;
        }
        else
            return " ";
    }

    //扫描
    void ScanDetection()
    {
        RaycastHit hitInfor;
        String con;
        String path = "J:/Master/test01/Vector3.txt";

        //String con2;
        //String path2 = "J:/Master/test01/Introduction.txt";

        Vector3 vec1 = new Vector3(0,1 ,-(float)Math.Tan(1 * Pi / 180));
        Vector3 vec2 = new Vector3(0, 1, -(float)Math.Tan(4* Pi / 180));
        Vector3 vec3 = new Vector3(0, 1, -(float)Math.Tan(7 * Pi / 180));
        Vector3 vec4 = new Vector3(0, 1, -(float)Math.Tan(10 * Pi / 180));
        Vector3 vec5 = new Vector3(0, 1, -(float)Math.Tan(13 * Pi / 180));
        Vector3 vec6 = new Vector3(0, 1, -(float)Math.Tan(16 * Pi / 180));
        Vector3 vec7 = new Vector3(0, 1, -(float)Math.Tan(19 * Pi / 180));
        Vector3 vec8 = new Vector3(0, 1, -(float)Math.Tan(22 * Pi / 180));
        Vector3 vec9 = new Vector3(0, 1, -(float)Math.Tan(25 * Pi / 180));
        Vector3 vec10 = new Vector3(0, 1, -(float)Math.Tan(28 * Pi / 180));
        Vector3 vec11 = new Vector3(0, 1, -(float)Math.Tan(31 * Pi / 180));


        Vector3 liftDierction = new Vector3(GetRelativePosition(transform, vec1).x, GetRelativePosition(transform, vec1).y, GetRelativePosition(transform, vec1).z);
        Vector3 liftDierction1 = new Vector3(GetRelativePosition(transform, vec2).x, GetRelativePosition(transform, vec2).y, GetRelativePosition(transform, vec2).z);
        Vector3 liftDierction2 = new Vector3(GetRelativePosition(transform, vec3).x, GetRelativePosition(transform, vec3).y, GetRelativePosition(transform, vec3).z);
        Vector3 liftDierction3 = new Vector3(GetRelativePosition(transform, vec4).x, GetRelativePosition(transform, vec4).y, GetRelativePosition(transform, vec4).z);
        Vector3 liftDierction4 = new Vector3(GetRelativePosition(transform, vec5).x, GetRelativePosition(transform, vec5).y, GetRelativePosition(transform, vec5).z);
        Vector3 minDirection = new Vector3(GetRelativePosition(transform, vec6).x, GetRelativePosition(transform, vec6).y, GetRelativePosition(transform, vec6).z);
        Vector3 rightDierction4 = new Vector3(GetRelativePosition(transform, vec7).x, GetRelativePosition(transform, vec7).y, GetRelativePosition(transform, vec7).z);
        Vector3 rightDierction3 = new Vector3(GetRelativePosition(transform, vec8).x, GetRelativePosition(transform, vec8).y, GetRelativePosition(transform, vec8).z);
        Vector3 rightDierction2 = new Vector3(GetRelativePosition(transform, vec9).x, GetRelativePosition(transform, vec9).y, GetRelativePosition(transform, vec9).z);
        Vector3 rightDierction1 = new Vector3(GetRelativePosition(transform, vec10).x, GetRelativePosition(transform, vec10).y, GetRelativePosition(transform, vec10).z);
        Vector3 rightDierction = new Vector3(GetRelativePosition(transform, vec11).x, GetRelativePosition(transform, vec11).y, GetRelativePosition(transform, vec11).z);

        Ray liftRay = new Ray(transform.position, liftDierction);
        Ray liftRay1 = new Ray(transform.position, liftDierction1);
        Ray liftRay2 = new Ray(transform.position, liftDierction2);
        Ray liftRay3 = new Ray(transform.position, liftDierction3);
        Ray liftRay4 = new Ray(transform.position, liftDierction4);
        Ray midRay = new Ray(transform.position, minDirection);
        Ray rightRay1 = new Ray(transform.position, rightDierction4);
        Ray rightRay2 = new Ray(transform.position, rightDierction3);
        Ray rightRay3 = new Ray(transform.position, rightDierction2);
        Ray rightRay4 = new Ray(transform.position, rightDierction1);
        Ray rightRay = new Ray(transform.position, rightDierction);

        if (Physics.Raycast(liftRay, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {

            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(Move.transform, hitInfor.point));
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x,GetRelativePosition(Move.transform, hitInfor.point).y ,(-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point);
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(liftRay.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(liftRay1, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point).z);
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point);
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(liftRay1.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(liftRay2, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point).z);
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(liftRay2.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(liftRay3, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(liftRay3.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(liftRay4, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(liftRay4.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(midRay, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(midRay.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(rightRay1, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(rightRay1.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(rightRay2, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(rightRay2.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(rightRay3, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(rightRay3.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(rightRay4, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(rightRay4.origin, hitInfor.point, Color.red);
        }
        if (Physics.Raycast(rightRay, out hitInfor, 20, mask, QueryTriggerInteraction.Ignore))
        {
            //print("liftRay检测到AI距障碍物" + hitInfor.collider.gameObject.name + "的交点相对坐标为：" + GetRelativePosition(transform, hitInfor.point));
            //con = GetRelativePosition(Move.transform, hitInfor.point).x + " " + GetRelativePosition(Move.transform, hitInfor.point).y + " " + (-GetRelativePosition(Move.transform, hitInfor.point)).z;//con = SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).x + " " + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point)).y + " " + SelectionPoint((-GetRelativePosition(Move.transform, hitInfor.point))).z;
            con = hitInfor.collider.gameObject.name + "," + SelectionPoint(GetRelativePosition(Move.transform, hitInfor.point).x, GetRelativePosition(Move.transform, hitInfor.point).y, (-GetRelativePosition(Move.transform, hitInfor.point)).z) + "," + IsCollision(Move.transform.position, hitInfor.point); 
            SaveTextFile(path, con);
            Send(con);
            //con2 = hitInfor.collider.gameObject.name + "：" + SelectionPoint(GetRelativePosition(transform, hitInfor.point));
            //SaveTextFile(path2, con2);
            Debug.DrawLine(rightRay.origin, hitInfor.point, Color.red);
        }
        else
        {
            Debug.DrawLine(liftRay.origin, liftRay.origin + liftRay.direction * 20, Color.blue);
            Debug.DrawLine(liftRay1.origin, liftRay1.origin + liftRay1.direction * 20, Color.blue);
            Debug.DrawLine(liftRay2.origin, liftRay2.origin + liftRay2.direction * 20, Color.blue);
            Debug.DrawLine(liftRay3.origin, liftRay3.origin + liftRay3.direction * 20, Color.blue);
            Debug.DrawLine(liftRay4.origin, liftRay4.origin + liftRay4.direction * 20, Color.blue);
            Debug.DrawLine(midRay.origin, midRay.origin + midRay.direction * 20, Color.blue);
            Debug.DrawLine(rightRay1.origin, rightRay1.origin + rightRay1.direction * 20, Color.blue);
            Debug.DrawLine(rightRay2.origin, rightRay2.origin + rightRay2.direction * 20, Color.blue);
            Debug.DrawLine(rightRay3.origin, rightRay3.origin + rightRay3.direction * 20, Color.blue);
            Debug.DrawLine(rightRay4.origin, rightRay4.origin + rightRay4.direction * 20, Color.blue);
            Debug.DrawLine(rightRay.origin, rightRay.origin + rightRay.direction * 20, Color.blue);
        }
        transform.Rotate(new Vector3(0, 0, 5));  //绕z轴旋转

    }

    //将获得坐标写入文件
    public static bool SaveTextFile(string path, string content)
    {
        if (string.IsNullOrEmpty(content))
        {
            return false;
        }
        try
        {
            using (FileStream fs = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                StreamWriter sw = new StreamWriter(fs, Encoding.GetEncoding(936));
                sw.WriteLine(content);
                sw.Close();
            }

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(string.Format("写入文件出错：消息={0},堆栈={1}", ex.Message, ex.StackTrace));
            return false;
        }
    }

void Update()
    {   
        ScanDetection();
    }

}


